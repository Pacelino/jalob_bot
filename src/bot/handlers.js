import { Markup } from 'telegraf';

export class BotHandlers {
  constructor(db, accountManager, monitorService, statsCollector) {
    this.db = db;
    this.accountManager = accountManager;
    this.monitorService = monitorService;
    this.statsCollector = statsCollector;
    this.pendingAuth = new Map(); // userId -> authData
    this.apiId = parseInt(process.env.API_ID);
    this.apiHash = process.env.API_HASH;
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown-—Å–∏–º–≤–æ–ª–æ–≤ Telegram
  escapeMarkdown(text) {
    if (text === undefined || text === null) return '';
    return String(text).replace(/([_*\[\]()~`>#+=|{}.!-])/g, '\\$1');
  }

  setupHandlers(bot) {
    // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    bot.start(this.handleStart.bind(this));
    bot.command('menu', this.handleStart.bind(this));
    bot.command('cancel', this.handleCancel.bind(this));
    
    // –ê–∫–∫–∞—É–Ω—Ç—ã
    bot.action('accounts', this.handleAccounts.bind(this));
    bot.action('add_account', this.handleAddAccount.bind(this));
    bot.action('cancel_auth', this.handleCancel.bind(this));
    bot.action(/^delete_account_(.+)$/, this.handleDeleteAccount.bind(this));
    bot.action('list_accounts', this.handleListAccounts.bind(this));
    
    // –ì—Ä—É–ø–ø—ã
    bot.action('groups', this.handleGroups.bind(this));
    bot.action('add_group', this.handleAddGroup.bind(this));
    bot.action('get_group_id', this.handleGetGroupId.bind(this));
    bot.action(/^delete_group_(.+)$/, this.handleDeleteGroup.bind(this));
    bot.action('list_groups', this.handleListGroups.bind(this));
    
    // –°—Ç–æ–ø-—Å–ª–æ–≤–∞
    bot.action('stopwords', this.handleStopwords.bind(this));
    bot.action('add_stopwords', this.handleAddStopwords.bind(this));
    bot.action(/^delete_stopword_(.+)$/, this.handleDeleteStopword.bind(this));
    bot.action('list_stopwords', this.handleListStopwords.bind(this));
    bot.action('clear_stopwords', this.handleClearStopwords.bind(this));
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    bot.action('monitor', this.handleMonitor.bind(this));
    bot.action('start_monitoring', this.handleStartMonitoring.bind(this));
    bot.action('stop_monitoring', this.handleStopMonitoring.bind(this));
    bot.action('toggle_mode', this.handleToggleMode.bind(this));
    bot.action('monitor_status', this.handleMonitorStatus.bind(this));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    bot.action('stats', this.handleStats.bind(this));
    bot.action('detailed_stats', this.handleDetailedStats.bind(this));
    bot.action('clear_stats', this.handleClearStats.bind(this));
    bot.action('export_stats', this.handleExportStats.bind(this));
    
    // –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    bot.action('back_to_main', this.handleStart.bind(this));
    
    // –û—á–µ—Ä–µ–¥—å –∂–∞–ª–æ–±
    bot.action('queue_status', this.handleQueueStatus.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('text', this.handleText.bind(this));

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    bot.use((ctx, next) => {
      if (ctx.from && ctx.from.id) {
        this.monitorService.addAdmin(ctx.from.id);
      }
      return next();
    });
  }

  async handleStart(ctx) {
    const data = this.db.read();
    const status = this.monitorService.getStatus();
    
    const message = `ü§ñ *Telegram Userbot Manager*

üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã: ${status.totalAccounts} (–ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ${status.connectedAccounts})
‚Ä¢ –ì—Ä—É–ø–ø—ã: ${status.monitoredGroups}
‚Ä¢ –°—Ç–æ–ø-—Å–ª–æ–≤–∞: ${status.stopwordsCount}
‚Ä¢ –†–µ–∂–∏–º: ${status.mode === 'test' ? 'üß™ –¢–µ—Å—Ç' : 'üöÄ –†–∞–±–æ—á–∏–π'}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${status.isActive ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üë• –ê–∫–∫–∞—É–Ω—Ç—ã', 'accounts'),
        Markup.button.callback('üì¢ –ì—Ä—É–ø–ø—ã', 'groups')
      ],
      [
        Markup.button.callback('üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞', 'stopwords'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')
      ],
      [
        Markup.button.callback('‚öôÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'monitor')
      ]
    ]);

    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    }
  }

  async handleAccounts(ctx) {
    const data = this.db.read();
    const connectedAccounts = this.accountManager.getConnectedAccounts();
    
    let message = `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n`;
    
    if (data.accounts.length === 0) {
      message += `üì± –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã`;
    } else {
      message += `üì± *–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:*\n`;
      for (const account of data.accounts) {
        const isConnected = connectedAccounts.some(acc => acc.id === account.id);
        const status = isConnected ? 'üü¢' : 'üî¥';
        message += `${status} ${account.phone} (${account.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})\n`;
      }
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'add_account')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', 'list_accounts')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  }

  async handleAddAccount(ctx) {
    await ctx.editMessageText(
      `üì± *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\\+79123456789\n\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_auth')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'accounts')]
        ]).reply_markup
      }
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    this.pendingAuth.set(ctx.from.id, { step: 'phone' });
  }

  async handleListAccounts(ctx) {
    const data = this.db.read();
    
    if (data.accounts.length === 0) {
      await ctx.editMessageText(
        `üì± *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'accounts')]
          ]).reply_markup
        }
      );
      return;
    }

    let message = `üì± *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n`;
    const buttons = [];
    
    for (const account of data.accounts) {
      const displayName = `${account.phone} (${account.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`;
      message += `‚Ä¢ ${displayName}\n`;
      buttons.push([Markup.button.callback(`üóë ${account.phone}`, `delete_account_${account.id}`)]);
    }

    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'accounts')]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });
  }

  async handleDeleteAccount(ctx) {
    const accountId = ctx.match[1];
    const data = this.db.read();
    const account = data.accounts.find(acc => acc.id === accountId);
    
    if (!account) {
      await ctx.answerCbQuery('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const result = await this.accountManager.removeAccount(accountId);
    
    if (result.success) {
      await ctx.answerCbQuery(`–ê–∫–∫–∞—É–Ω—Ç ${account.phone} —É–¥–∞–ª–µ–Ω`);
      await this.handleListAccounts(ctx);
    } else {
      await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${result.error}`);
    }
  }

  // –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
  async handleCancel(ctx) {
    const userId = ctx.from.id;
    const authData = this.pendingAuth.get(userId);
    if (!authData) {
      if (ctx.updateType === 'callback_query') {
        await ctx.answerCbQuery('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞');
        await this.handleAccounts(ctx);
      } else {
        await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
      return;
    }

    try {
      if (authData.timeout) {
        clearTimeout(authData.timeout);
      }
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø—Ä–æ–º–∏—Å, —á—Ç–æ–±—ã client.start() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
      if (authData.reject) {
        authData.reject(new Error('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'));
      }
      // –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
      if (authData.accountId) {
        await this.accountManager.abortPendingClient(authData.accountId);
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', e);
    } finally {
      this.pendingAuth.delete(userId);
    }

    if (ctx.updateType === 'callback_query') {
      await ctx.answerCbQuery('–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω');
      await this.handleAccounts(ctx);
    } else {
      await ctx.reply('‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤.');
      // –ü–æ–∫–∞–∂–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ –º–æ–∂–µ–º
      try { await this.handleAccounts(ctx); } catch {}
    }
  }

  async handleGroups(ctx) {
    const data = this.db.read();
    
    let message = `üì¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏*\n\n`;
    
    if (data.groups.length === 0) {
      message += `üì¢ –ì—Ä—É–ø–ø—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã`;
    } else {
      message += `üì¢ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≥—Ä—É–ø–ø—ã:*\n`;
      for (const group of data.groups) {
        message += `‚Ä¢ ${this.escapeMarkdown(group)}\n`;
      }
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', 'add_group')],
      [Markup.button.callback('üîç –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã', 'get_group_id')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', 'list_groups')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  }

  async handleAddGroup(ctx) {
    await ctx.editMessageText(
      `üì¢ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –≥—Ä—É–ø–ø—ã –∏–ª–∏ ID:\n\\@channel\\_name –∏–ª–∏ \\-1001234567890`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'groups')]
        ]).reply_markup
      }
    );

    this.pendingAuth.set(ctx.from.id, { step: 'group' });
  }

  async handleGetGroupId(ctx) {
    await ctx.editMessageText(
      `üîç *–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ—ë —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID:\n\\@channel\\_name`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'groups')]
        ]).reply_markup
      }
    );

    this.pendingAuth.set(ctx.from.id, { step: 'get_group_id' });
  }

  async handleListGroups(ctx) {
    const data = this.db.read();
    
    if (data.groups.length === 0) {
      await ctx.editMessageText(
        `üì¢ *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø*\n\n–ì—Ä—É–ø–ø—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'groups')]
          ]).reply_markup
        }
      );
      return;
    }

    let message = `üì¢ *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø*\n\n`;
    const buttons = [];
    
    for (const group of data.groups) {
      message += `‚Ä¢ ${this.escapeMarkdown(group)}\n`;
      const encodedGroup = encodeURIComponent(group);
      buttons.push([Markup.button.callback(`üóë ${group}`, `delete_group_${encodedGroup}`)]);
    }

    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'groups')]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });
  }

  async handleDeleteGroup(ctx) {
    const groupId = decodeURIComponent(ctx.match[1]);
    
    await this.db.removeGroup(groupId);
    await ctx.answerCbQuery(`–ì—Ä—É–ø–ø–∞ ${groupId} —É–¥–∞–ª–µ–Ω–∞`);
    await this.handleListGroups(ctx);
  }

  async handleStopwords(ctx) {
    const data = this.db.read();
    
    let message = `üö´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏*\n\n`;
    
    if (data.stopwords.length === 0) {
      message += `üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã`;
    } else {
      message += `üö´ *–°—Ç–æ–ø-—Å–ª–æ–≤–∞ (${data.stopwords.length}):*\n`;
      const preview = data.stopwords.slice(0, 10);
      for (const word of preview) {
        message += `‚Ä¢ ${this.escapeMarkdown(word)}\n`;
      }
      if (data.stopwords.length > 10) {
        message += `... –∏ –µ—â–µ ${data.stopwords.length - 10}`;
      }
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞', 'add_stopwords')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤', 'list_stopwords')],
      [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', 'clear_stopwords')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  }

  async handleAddStopwords(ctx) {
    await ctx.editMessageText(
      `üö´ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n—Ä–µ–∫–ª–∞–ºa\n—Å–ø–∞–º\n–ø—Ä–æ–¥–∞–º`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'stopwords')]
        ]).reply_markup
      }
    );

    this.pendingAuth.set(ctx.from.id, { step: 'stopwords' });
  }

  async handleListStopwords(ctx) {
    const data = this.db.read();
    
    if (data.stopwords.length === 0) {
      await ctx.editMessageText(
        `üö´ *–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤*\n\n–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'stopwords')]
          ]).reply_markup
        }
      );
      return;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 10 —Å–ª–æ–≤
    const wordsPerPage = 10;
    const totalPages = Math.ceil(data.stopwords.length / wordsPerPage);
    
    let message = `üö´ *–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤* (–≤—Å–µ–≥–æ: ${data.stopwords.length})\n\n`;
    const buttons = [];
    
    for (let i = 0; i < Math.min(wordsPerPage, data.stopwords.length); i++) {
      const word = data.stopwords[i];
      message += `‚Ä¢ ${this.escapeMarkdown(word)}\n`;
      buttons.push([Markup.button.callback(`üóë ${word}`, `delete_stopword_${encodeURIComponent(word)}`)]);
    }

    if (data.stopwords.length > wordsPerPage) {
      message += `\n... –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ${wordsPerPage} –∏–∑ ${data.stopwords.length}`;
    }

    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'stopwords')]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });
  }

  async handleDeleteStopword(ctx) {
    const word = decodeURIComponent(ctx.match[1]);
    
    await this.db.removeStopwords([word]);
    await ctx.answerCbQuery(`–°—Ç–æ–ø-—Å–ª–æ–≤–æ "${word}" —É–¥–∞–ª–µ–Ω–æ`);
    await this.handleListStopwords(ctx);
  }

  async handleClearStopwords(ctx) {
    const data = this.db.read();
    
    if (data.stopwords.length === 0) {
      await ctx.answerCbQuery('–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ —É–∂–µ –ø—É—Å—Ç');
      return;
    }

    await this.db.removeStopwords(data.stopwords);
    await ctx.answerCbQuery(`–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (${data.stopwords.length} —à—Ç.)`);
    await this.handleStopwords(ctx);
  }

  async handleMonitor(ctx) {
    const status = this.monitorService.getStatus();
    
    const message = `‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º*

üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${status.isActive ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –†–µ–∂–∏–º: ${status.mode === 'test' ? 'üß™ –¢–µ—Å—Ç-—Ä–µ–∂–∏–º' : 'üöÄ –†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º'}
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${status.connectedAccounts}/${status.totalAccounts}
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≥—Ä—É–ø–ø: ${status.monitoredGroups}
‚Ä¢ –°—Ç–æ–ø-—Å–ª–æ–≤: ${status.stopwordsCount}

${status.mode === 'test' ? 'üìù –í —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ –∂–∞–ª–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è' : '‚ö° –í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –∂–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}`;

    const buttons = [];
    
    if (status.isActive) {
      buttons.push([Markup.button.callback('‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'stop_monitoring')]);
    } else {
      buttons.push([Markup.button.callback('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'start_monitoring')]);
    }
    
    buttons.push([Markup.button.callback('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º', 'toggle_mode')]);
    buttons.push([Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å', 'monitor_status')]);
    buttons.push([Markup.button.callback('üìã –û—á–µ—Ä–µ–¥—å –∂–∞–ª–æ–±', 'queue_status')]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons).reply_markup
    });
  }

  async handleStartMonitoring(ctx) {
    const result = await this.monitorService.start();
    
    if (result.success) {
      await ctx.answerCbQuery(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (${result.connectedAccounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)`);
    } else {
      await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${result.message || result.error}`);
    }
    
    await this.handleMonitor(ctx);
  }

  async handleStopMonitoring(ctx) {
    const result = await this.monitorService.stop();
    
    if (result.success) {
      await ctx.answerCbQuery('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
      await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${result.message || result.error}`);
    }
    
    await this.handleMonitor(ctx);
  }

  async handleToggleMode(ctx) {
    const data = this.db.read();
    const newMode = data.mode === 'test' ? 'run' : 'test';
    
    await this.db.setMode(newMode);
    
    const modeText = newMode === 'test' ? '—Ç–µ—Å—Ç-—Ä–µ–∂–∏–º' : '—Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º';
    await ctx.answerCbQuery(`–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${modeText}`);
    await this.handleMonitor(ctx);
  }

  async handleMonitorStatus(ctx) {
    const status = this.monitorService.getStatus();
    
    const message = `üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã: ${status.totalAccounts} –¥–æ–±–∞–≤–ª–µ–Ω–æ
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${status.connectedAccounts}
‚Ä¢ –ì—Ä—É–ø–ø—ã: ${status.monitoredGroups}
‚Ä¢ –°—Ç–æ–ø-—Å–ª–æ–≤–∞: ${status.stopwordsCount}
‚Ä¢ –†–µ–∂–∏–º: ${status.mode === 'test' ? 'üß™ –¢–µ—Å—Ç' : 'üöÄ –†–∞–±–æ—á–∏–π'}

‚ö° *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:* ${status.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

${status.connectedAccounts === 0 ? '‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤' : ''}
${status.monitoredGroups === 0 ? '‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' : ''}
${status.stopwordsCount === 0 ? '‚ö†Ô∏è –ù–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞' : ''}`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'monitor')]
      ]).reply_markup
    });
  }

  async handleStats(ctx) {
    const totalStats = this.statsCollector.getTotalStats();
    const topWords = this.statsCollector.getTopWords(5);
    const topGroups = this.statsCollector.getTopGroups(5);
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: ${totalStats.totalHits}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: ${totalStats.totalWords}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: ${totalStats.totalGroups}

`;

    if (topWords.length > 0) {
      message += `üî• *–¢–æ–ø —Å—Ç–æ–ø-—Å–ª–æ–≤:*\n`;
      for (const item of topWords) {
        message += `‚Ä¢ ${this.escapeMarkdown(item.word)}: ${item.count}\n`;
      }
      message += '\n';
    }

    if (topGroups.length > 0) {
      message += `üì¢ *–¢–æ–ø –≥—Ä—É–ø–ø:*\n`;
      for (const item of topGroups) {
        message += `‚Ä¢ ${this.escapeMarkdown(item.group)}: ${item.count}\n`;
      }
    }

    if (totalStats.totalHits === 0) {
      message += `üì≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞`;
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'detailed_stats')],
      [
        Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å', 'clear_stats'),
        Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç', 'export_stats')
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  }

  async handleDetailedStats(ctx) {
    const formattedStats = this.statsCollector.getFormattedStats();
    
    if (formattedStats.length === 0) {
      await ctx.editMessageText(
        `üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'stats')]
          ]).reply_markup
        }
      );
      return;
    }

    let message = `üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
    const limit = 20;
    for (let i = 0; i < Math.min(limit, formattedStats.length); i++) {
      const stat = formattedStats[i];
      message += `‚Ä¢ ${this.escapeMarkdown(stat.group)} | ${this.escapeMarkdown(stat.word)}: ${stat.count}\n`;
    }
    
    if (formattedStats.length > limit) {
      message += `\n... –∏ –µ—â–µ ${formattedStats.length - limit} –∑–∞–ø–∏—Å–µ–π`;
    }

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'stats')]
      ]).reply_markup
    });
  }

  async handleClearStats(ctx) {
    const result = await this.statsCollector.clearStats();
    
    if (result) {
      await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞');
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    await this.handleStats(ctx);
  }

  async handleExportStats(ctx) {
    const exportData = this.statsCollector.exportStats();
    
    if (exportData.totalStats.totalHits === 0) {
      await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    const jsonData = JSON.stringify(exportData, null, 2);
    
    try {
      await ctx.replyWithDocument({
        source: Buffer.from(jsonData, 'utf8'),
        filename: `stats_${new Date().toISOString().split('T')[0]}.json`
      }, {
        caption: '–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON'
      });
      
      await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async handleText(ctx) {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    const authData = this.pendingAuth.get(userId);
    
    console.log(`handleText –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–µ–∫—Å—Ç: "${text}"`);
    console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ pendingAuth:`, authData ? authData.step : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    
    if (!authData) {
      console.log(`–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
    }

    try {
      // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —à–∞–≥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (text.trim().toLowerCase() === '/cancel') {
        await this.handleCancel(ctx);
        return;
      }
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∏ –ø–∞—Ä–æ–ª—è
      if (authData.step === 'waiting_code') {
        console.log(`–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${text}`);
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if (authData.timeout) {
          clearTimeout(authData.timeout);
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–¥ (–æ–±—ã—á–Ω–æ 5-7 —Ü–∏—Ñ—Ä)
        const cleanCode = text.replace(/[^0-9]/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        console.log(`–û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–¥: ${cleanCode}`);
        
        if (cleanCode.length < 4 || cleanCode.length > 7) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4-7 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
          authData.timeout = setTimeout(() => {
            authData.reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ (5 –º–∏–Ω—É—Ç)'));
            this.pendingAuth.delete(userId);
          }, 300000);
          return;
        }
        
        console.log(`–ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–¥ –≤ resolve: ${cleanCode}`);
        // –ü–µ—Ä–µ–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–æ–º–∏—Å
        authData.resolve(cleanCode);
        return;
      }
      
      if (authData.step === 'waiting_password') {
        console.log(`–ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if (authData.timeout) {
          clearTimeout(authData.timeout);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø—É—Å—Ç–æ–π
        if (!text.trim()) {
          await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA):');
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
          authData.timeout = setTimeout(() => {
            authData.reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è (5 –º–∏–Ω—É—Ç)'));
            this.pendingAuth.delete(userId);
          }, 300000);
          return;
        }
        
        console.log(`–ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ resolve`);
        // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ø—Ä–æ–º–∏—Å
        authData.resolve(text.trim());
        return;
      }
      
      // –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤
      if (authData.step === 'phone') {
        await this.handlePhoneInput(ctx, text);
      } else if (authData.step === 'group') {
        await this.handleGroupInput(ctx, text);
      } else if (authData.step === 'get_group_id') {
        await this.handleGetGroupIdInput(ctx, text);
      } else if (authData.step === 'stopwords') {
        await this.handleStopwordsInput(ctx, text);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
      await ctx.reply(`–û—à–∏–±–∫–∞: ${error.message}`);
      this.pendingAuth.delete(userId);
    }
  }

  async handlePhoneInput(ctx, phone) {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if (!phone.match(/^\+?[1-9]\d{10,14}$/)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +79123456789');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
    const data = this.db.read();
    const existingAccount = data.accounts.find(acc => acc.phone === phone);
    if (existingAccount) {
      await ctx.reply('‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω');
      this.pendingAuth.delete(userId);
      return;
    }

    try {
      await ctx.reply('üîÑ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...');
      
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phone}`);
      const { client, accountId } = await this.accountManager.createClient(phone);
      console.log(`–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phone}, accountId: ${accountId}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      this.pendingAuth.set(userId, {
        step: 'starting_auth',
        phone,
        accountId,
        client
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è client.start()
      await this.startTelegramAuth(ctx, client, phone, accountId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      
      let errorMessage = error.message;
      if (error.message.includes('PHONE_NUMBER_BANNED')) {
        errorMessage = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram';
      } else if (error.message.includes('PHONE_NUMBER_INVALID')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
      } else if (error.message.includes('PHONE_NUMBER_FLOOD')) {
        errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      } else if (error.message.includes('API_ID_INVALID')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ API_ID/API_HASH –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏';
      }
      
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${errorMessage}`);
      this.pendingAuth.delete(userId);
    }
  }



  async handleGetGroupIdInput(ctx, groupInput) {
    const userId = ctx.from.id;
    
    try {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: "${groupInput}"`);
      
      let normalizedGroupId = groupInput.trim();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me
      if (normalizedGroupId.includes('t.me/')) {
        const match = normalizedGroupId.match(/t\.me\/([^/?]+)/);
        if (match) {
          normalizedGroupId = match[1];
        }
      }
      
      // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (normalizedGroupId.startsWith('@')) {
        normalizedGroupId = normalizedGroupId.substring(1);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const accounts = this.accountManager.getConnectedAccounts();
      if (accounts.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã');
        this.pendingAuth.delete(userId);
        return;
      }
      
      const client = this.accountManager.getClient(accounts[0].id);
      if (!client) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞');
        this.pendingAuth.delete(userId);
        return;
      }
      
      await ctx.reply('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
      try {
        const entity = await client.getEntity(normalizedGroupId);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
        let realId;
        if (entity.id) {
          // –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å -100
          if (entity.className === 'Channel' || entity.megagroup) {
            realId = `-100${entity.id}`;
          } else {
            realId = entity.id.toString();
          }
        } else if (entity.chatId) {
          realId = entity.chatId.toString();
        } else {
          realId = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        const safeUsername = this.escapeMarkdown(normalizedGroupId);
        const safeTitle = this.escapeMarkdown(entity.title || '');
        await ctx.reply(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ @${safeUsername}:\n\nüÜî **–ü–æ–ª–Ω—ã–π ID**: \`${realId}\`\nüÜî **–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID**: \`${entity.id}\`\nüìõ **–ù–∞–∑–≤–∞–Ω–∏–µ**: ${safeTitle}\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤**: ${entity.participantsCount || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nüè∑ **–¢–∏–ø**: ${this.escapeMarkdown(entity.className)}${entity.megagroup ? ' (–º–µ–≥–∞–≥—Ä—É–ø–ø–∞)' : ''}`, {
          parse_mode: 'Markdown'
        });
        
      } catch (entityError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ:', entityError);
        await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ @${normalizedGroupId}.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚Ä¢ –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è\n‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ\n\n–û—à–∏–±–∫–∞: ${entityError.message}`);
      }
      
      this.pendingAuth.delete(userId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã: ${error.message}`);
      this.pendingAuth.delete(userId);
    }
  }

  async handleGroupInput(ctx, groupInput) {
    const userId = ctx.from.id;
    
    try {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: "${groupInput}"`);
      let normalizedGroupId = groupInput.trim();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me
      if (normalizedGroupId.includes('t.me/')) {
        const match = normalizedGroupId.match(/t\.me\/([^/?]+)/);
        if (match) {
          normalizedGroupId = match[1];
          console.log(`–ò–∑–≤–ª–µ—á–µ–Ω username –∏–∑ URL: ${normalizedGroupId}`);
        }
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã
      if (!normalizedGroupId.startsWith('@') && !normalizedGroupId.match(/^-?\d+$/)) {
        normalizedGroupId = '@' + normalizedGroupId;
      }
      
      console.log(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã: "${normalizedGroupId}"`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
      const data = this.db.read();
      if (data.groups.includes(normalizedGroupId)) {
        await ctx.reply('‚ùå –ì—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        this.pendingAuth.delete(userId);
        return;
      }

      console.log(`–î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${normalizedGroupId}`);
      await this.db.addGroup(normalizedGroupId);
      
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const safeGroupId = normalizedGroupId.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
      await ctx.reply(`‚úÖ –ì—Ä—É–ø–ø–∞ ${safeGroupId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`);
      
      this.pendingAuth.delete(userId);
      console.log(`–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${normalizedGroupId}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${error.message}`);
      this.pendingAuth.delete(userId);
    }
  }

  async handleStopwordsInput(ctx, wordsInput) {
    const userId = ctx.from.id;
    
    try {
      // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º
      const words = wordsInput
        .split(/[,\n\r]+/)
        .map(word => word.trim().toLowerCase())
        .filter(word => word.length > 0);

      if (words.length === 0) {
        await ctx.reply('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞');
        this.pendingAuth.delete(userId);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      const data = this.db.read();
      const existingWords = data.stopwords.map(word => word.toLowerCase());
      const newWords = words.filter(word => !existingWords.includes(word));

      if (newWords.length === 0) {
        await ctx.reply('‚ùå –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        this.pendingAuth.delete(userId);
        return;
      }

      await this.db.addStopwords(newWords);
      
      let message = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newWords.length} —Å—Ç–æ–ø-—Å–ª–æ–≤:\n`;
      for (const word of newWords) {
        message += `‚Ä¢ ${word}\n`;
      }
      
      if (words.length > newWords.length) {
        message += `\n‚ö†Ô∏è ${words.length - newWords.length} —Å–ª–æ–≤ —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ`;
      }

      await ctx.reply(message);
      this.pendingAuth.delete(userId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤: ${error.message}`);
      this.pendingAuth.delete(userId);
    }
  }

  async handleQueueStatus(ctx) {
    const queueStatus = this.monitorService.getQueueStatus();
    
    let message = `üìã *–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –∂–∞–ª–æ–±*\n\n`;
    
    message += `üìä *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
    message += `‚Ä¢ –ñ–∞–ª–æ–± –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueStatus.queueLength}\n`;
    message += `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${queueStatus.isProcessing ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n`;
    
    if (Object.keys(queueStatus.accountStats).length > 0) {
      message += `üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:*\n`;
      
      for (const [accountId, stats] of Object.entries(queueStatus.accountStats)) {
        const statusIcon = stats.canSendMore ? 'üü¢' : 'üî¥';
        message += `${statusIcon} \`${accountId.substring(0, 8)}...\`\n`;
        message += `   ‚Ä¢ –ó–∞ —á–∞—Å: ${stats.reportsThisHour}/${this.monitorService.maxReportsPerHour}\n`;
        message += `   ‚Ä¢ –ó–∞ –¥–µ–Ω—å: ${stats.reportsToday}/${this.monitorService.maxReportsPerDay}\n`;
      }
    } else {
      message += `üì≠ –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º`;
    }
    
    message += `\n‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã:*\n`;
    message += `‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: ${Math.round(this.monitorService.reportDelayMin/1000)}-${Math.round(this.monitorService.reportDelayMax/1000)} —Å–µ–∫\n`;
    message += `‚Ä¢ –õ–∏–º–∏—Ç –≤ —á–∞—Å: ${this.monitorService.maxReportsPerHour}\n`;
    message += `‚Ä¢ –õ–∏–º–∏—Ç –≤ –¥–µ–Ω—å: ${this.monitorService.maxReportsPerDay}`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'monitor')]
      ]).reply_markup
    });
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ client.start()  
  async startTelegramAuth(ctx, client, phone, accountId) {
    const userId = ctx.from.id;
    
    try {
      await ctx.reply(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${phone}...`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –µ–¥–∏–Ω—ã–º –≤—ã–∑–æ–≤–æ–º client.start()
      const result = await client.start({
        phoneNumber: async () => {
          return phone;
        },
        phoneCode: async () => {
          console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phone}`);
          await ctx.reply('üì® –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø—Ä–∏—à–µ–ª –≤ SMS –∏–ª–∏ Telegram). –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel');
          
          // –ñ–¥–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          return new Promise((resolve, reject) => {
            console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
            this.pendingAuth.set(userId, {
              step: 'waiting_code',
              phone,
              accountId,
              client,
              resolve,
              reject,
              timeout: setTimeout(() => {
                console.log(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ (5 –º–∏–Ω—É—Ç)'));
                this.pendingAuth.delete(userId);
              }, 300000) // 5 –º–∏–Ω—É—Ç
            });
          });
        },
        password: async () => {
          console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phone}`);
          await ctx.reply('üîê –í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA). –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel');
          
          // –ñ–¥–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          return new Promise((resolve, reject) => {
            console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
            this.pendingAuth.set(userId, {
              step: 'waiting_password',
              phone,
              accountId,
              client,
              resolve,
              reject,
              timeout: setTimeout(() => {
                console.log(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è (5 –º–∏–Ω—É—Ç)'));
                this.pendingAuth.delete(userId);
              }, 300000) // 5 –º–∏–Ω—É—Ç
            });
          });
        },
        onError: (err) => {
          console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${err.message}`);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const authData = this.pendingAuth.get(userId);
          if (authData && authData.timeout) {
            clearTimeout(authData.timeout);
          }
          this.pendingAuth.delete(userId);
        }
      });

      console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phone, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –°–†–ê–ó–£ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId);
      this.accountManager.saveSession(accountId, client.session);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      console.log('–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
      const me = await client.getMe();
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞:', me.firstName, me.username);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const accountData = {
        id: accountId,
        phone: phone,
        sessionFile: this.accountManager.getSessionPath(accountId),
        userId: me.id?.toString(),
        username: me.username,
        firstName: me.firstName,
        lastName: me.lastName,
        addedAt: new Date().toISOString()
      };

      await this.db.addAccount(accountData);
      
      await ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–ò–º—è: ${me.firstName} ${me.lastName || ''}\nUsername: ${me.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      this.pendingAuth.delete(userId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const authData = this.pendingAuth.get(userId);
      if (authData && authData.timeout) {
        clearTimeout(authData.timeout);
      }
      
      let errorMessage = error.message;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram API
      if (error.message.includes('PHONE_CODE_EXPIRED')) {
        errorMessage = '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.';
      } else if (error.message.includes('PHONE_CODE_INVALID')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (error.message.includes('PASSWORD_HASH_INVALID')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (error.message.includes('SESSION_PASSWORD_NEEDED')) {
        errorMessage = '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.';
      } else if (error.message.includes('AUTH_KEY_UNREGISTERED')) {
        errorMessage = '–°–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.';
      }
      
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
      this.pendingAuth.delete(userId);
    }
  }


}