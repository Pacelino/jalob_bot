import { Api, TelegramClient } from 'telegram';

export class MonitorService {
  constructor(db, accountManager, statsCollector, bot) {
    this.db = db;
    this.accountManager = accountManager;
    this.statsCollector = statsCollector;
    this.bot = bot;
    this.isActive = false;
    this.eventHandlers = new Map(); // accountId -> eventHandler
    this.reconnectAttempts = new Map(); // accountId -> attempts count
    this.reconnectTimeouts = new Map(); // accountId -> timeout id
    this.adminUsers = new Set(); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    this.periodicMonitor = null;
    this.lastMessageIds = new Map(); // groupId -> lastMessageId
    this.monitorInterval = 45000; // 45 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    this.reportQueue = []; // –û—á–µ—Ä–µ–¥—å –∂–∞–ª–æ–± –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    this.reportHistory = new Map(); // accountId -> array of timestamps
    this.isProcessingQueue = false;
    this.queueProcessor = null;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    this.reportDelayMin = parseInt(process.env.REPORT_DELAY_MIN) || 60000; // 1 –º–∏–Ω—É—Ç–∞
    this.reportDelayMax = parseInt(process.env.REPORT_DELAY_MAX) || 180000; // 3 –º–∏–Ω—É—Ç—ã
    this.maxReportsPerHour = parseInt(process.env.MAX_REPORTS_PER_HOUR) || 10;
    this.maxReportsPerDay = parseInt(process.env.MAX_REPORTS_PER_DAY) || 50;
    
    this.startQueueProcessor();
  }

  async start() {
    if (this.isActive) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return { success: false, message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      const connectionResults = await this.accountManager.connectAllAccounts();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      const connectedAccounts = connectionResults.filter(r => r.status === 'connected');
      if (connectedAccounts.length === 0) {
        return { success: false, message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤' };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      for (const account of this.accountManager.getConnectedAccounts()) {
        await this.addEventHandler(account.id);
      }

      this.isActive = true;
      console.log('üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      this.startPeriodicMonitoring();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      this.notifyAdmins(`üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω\n–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${connectedAccounts.length}`);

      return { success: true, connectedAccounts: connectedAccounts.length };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      return { success: false, error: error.message };
    }
  }

  async stop() {
    if (!this.isActive) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return { success: false, message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' };
    }

    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      for (const [accountId, handler] of this.eventHandlers) {
        const client = this.accountManager.getClient(accountId);
        if (client) {
          client.removeEventHandler(handler);
        }
      }
      this.eventHandlers.clear();

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      for (const timeoutId of this.reconnectTimeouts.values()) {
        clearTimeout(timeoutId);
      }
      this.reconnectTimeouts.clear();
      this.reconnectAttempts.clear();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
      if (this.queueProcessor) {
        clearInterval(this.queueProcessor);
        this.queueProcessor = null;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      if (this.periodicMonitor) {
        clearInterval(this.periodicMonitor);
        this.periodicMonitor = null;
        console.log('üî¥ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }

      this.isActive = false;
      console.log('üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      this.notifyAdmins('üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

      return { success: true };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      return { success: false, error: error.message };
    }
  }

  async addEventHandler(accountId) {
    const client = this.accountManager.getClient(accountId);
    if (!client) {
      console.error(`–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const eventHandler = async (event) => {
      try {
        console.log(`üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, {
          type: event?.constructor?.name,
          hasMessage: !!event?.message,
          messageText: event?.message?.text?.substring(0, 30)
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!event || !event.message) {
          console.log('‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          return;
        }
        
        await this.handleNewMessage(event, accountId);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
        
        // resolve() –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ app.js
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if (error.message.includes('CONNECTION') || error.message.includes('TIMEOUT')) {
          this.scheduleReconnect(accountId);
        }
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    try {
      console.log(`–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}...`);
      
      // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è UpdateNewMessage
      client.addEventHandler(eventHandler, new Api.UpdateNewMessage({}));
      
      // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (NewMessage)
      try {
        const { NewMessage } = await import('telegram/events/index.js');
        const simpleHandler = async (event) => {
          console.log(`üì® NewMessage event –ø–æ–ª—É—á–µ–Ω:`, {
            text: event.message?.text?.substring(0, 30),
            chatId: event.chatId?.toString(),
            peerId: event.peerId?.toString()
          });
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ –≤ UpdateNewMessage
          const fakeUpdate = {
            message: event.message,
            chatId: event.chatId,
            peerId: event.peerId
          };
          
          await this.handleNewMessage(fakeUpdate, accountId);
        };
        
        client.addEventHandler(simpleHandler, new NewMessage({}));
        console.log(`‚úÖ NewMessage –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω`);
      } catch (newMessageError) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å NewMessage –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:`, newMessageError.message);
      }
      
      // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
      const debugHandler = async (update) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ connection state
        if (update?.constructor?.name !== 'UpdateConnectionState') {
          console.log(`üîî –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:`, {
            type: update?.constructor?.name,
            className: update?.className,
            hasMessage: !!update?.message,
            messageText: update?.message?.text?.substring(0, 30)
          });
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if (update?.message) {
          console.log(`üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å...`);
          await eventHandler(update);
        }
      };
      
      client.addEventHandler(debugHandler);
      
      // –ü—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
      const universalHandler = async (update) => {
        if (update?.message && update?.message?.text) {
          console.log(`üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${update.message.text.substring(0, 30)}..."`);
          await this.handleNewMessage(update, accountId);
        }
      };
      
      client.addEventHandler(universalHandler);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const isConnected = client.connected;
      console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ${accountId}: ${isConnected}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      try {
        const me = await client.getMe();
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${accountId} –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${me.firstName} (@${me.username})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        setTimeout(async () => {
          try {
            await client.sendMessage('me', { message: 'üîß –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π' });
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ catchUp
            console.log(`üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}...`);
            try {
              await client.catchUp();
              console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
            } catch (catchUpError) {
              console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:`, catchUpError.message);
              
              // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
              try {
                console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ getDialogs...`);
                await client.getDialogs({ limit: 1 });
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ getDialogs`);
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...`);
                try {
                  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                  client._updateLoop = true;
                  console.log(`‚úÖ Update loop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
                } catch (loopError) {
                  console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ update loop:`, loopError.message);
                }
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –≥—Ä—É–ø–ø
                const data = this.db.read();
                for (const groupId of data.groups) {
                  try {
                    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ${groupId}...`);
                    const messages = await client.getMessages(groupId, { limit: 3 });
                    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
                    for (const msg of messages) {
                      if (msg.text) {
                        console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text.substring(0, 50)}..." –æ—Ç ${msg.senderId}`);
                        
                        // –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                        console.log(`üîç –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —Å–æ–æ–±—â–µ–Ω–∏—è: "${msg.text}"`);
                        const messageText = msg.text.toLowerCase();
                        for (const stopword of data.stopwords) {
                          if (messageText.includes(stopword.toLowerCase())) {
                            console.log(`üö® –ù–ê–ô–î–ï–ù–û –°–¢–û–ü-–°–õ–û–í–û "${stopword}" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!`);
                            console.log(`üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...`);
                            await this.statsCollector.recordStopwordHit(groupId, stopword, {
                              id: msg.id,
                              date: msg.date,
                              senderId: msg.senderId
                            });
                          }
                        }
                      }
                    }
                  } catch (messagesError) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ${groupId}:`, messagesError.message);
                  }
                }
                
              } catch (dialogsError) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ getDialogs:`, dialogsError.message);
              }
            }
            
          } catch (testError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${accountId}:`, testError);
          }
        }, 2000); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        
      } catch (meError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${accountId}:`, meError);
      }
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
      return;
    }
    this.eventHandlers.set(accountId, eventHandler);
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
  }

  async handleNewMessage(event, accountId) {
    const message = event.message;
    if (!message || !message.text) return;

    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, {
      text: message.text.substring(0, 50) + '...',
      chatId: message.chatId?.toString(),
      peerId: message.peerId?.toString(),
      username: message.chat?.username,
      fullMessage: JSON.stringify(message, null, 2).substring(0, 500) + '...'
    });

    const data = this.db.read();
    const stopwords = data.stopwords;
    const monitoredGroups = data.groups;
    const mode = data.mode;

    console.log(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:`, {
      stopwords,
      monitoredGroups,
      mode
    });

    // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    const chatId = message.chatId?.toString() || message.peerId?.toString();
    if (!chatId) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞');
      return;
    }

    console.log(`üîç ID —á–∞—Ç–∞: ${chatId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –ª–∏ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
    const isMonitored = monitoredGroups.some(group => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏ –ø–æ username
      let matches = false;
      
      // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID
      if (group === chatId) {
        matches = true;
      }
      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ username
      else if (group === `@${message.chat?.username}`) {
        matches = true;
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ username, –∞ chatId —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
      else if (group.startsWith('@') && chatId.includes(group.substring(1))) {
        matches = true;
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π ID (-100...) –ø—Ä–æ—Ç–∏–≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID
      else if (group.startsWith('-100') && chatId === group.substring(4)) {
        matches = true;
      }
      // –û–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ chatId —ç—Ç–æ –ø–æ–ª–Ω—ã–π ID, –∞ group - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
      else if (chatId.startsWith('-100') && group === chatId.substring(4)) {
        matches = true;
      }
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã "${group}" –ø—Ä–æ—Ç–∏–≤ "${chatId}" (@${message.chat?.username}): ${matches}`);
      return matches;
    });

    console.log(`üìç –ì—Ä—É–ø–ø–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è: ${isMonitored}`);

    if (!isMonitored) {
      console.log('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }

    const messageText = message.text.toLowerCase();
    console.log(`üîç –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "${messageText}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
    for (const stopword of stopwords) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: "${stopword}"`);
      if (messageText.includes(stopword.toLowerCase())) {
        console.log(`üö® –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ "${stopword}" –≤ ${chatId}`);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await this.statsCollector.recordStopwordHit(chatId, stopword, {
          id: message.id,
          date: message.date,
          fromId: message.fromId?.toString()
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        const shortText = message.text.substring(0, 100) + (message.text.length > 100 ? '...' : '');
        this.notifyAdmins(`üö® –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: "${stopword}"\nüìç –ì—Ä—É–ø–ø–∞: ${chatId}\nüí¨ –¢–µ–∫—Å—Ç: ${shortText}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (mode === 'run') {
          this.queueReport(accountId, message, chatId, stopword);
        } else {
          console.log(`üìù –¢–ï–°–¢-–†–ï–ñ–ò–ú: –ñ–∞–ª–æ–±–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (${stopword} –≤ ${chatId})`);
          this.notifyAdmins(`üìù –¢–ï–°–¢-–†–ï–ñ–ò–ú: –ñ–∞–ª–æ–±–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ "${stopword}" –≤ ${chatId}`);
        }

        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        break;
      }
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  async reportMessage(accountId, message, chatId) {
    const client = this.accountManager.getClient(accountId);
    if (!client) {
      console.error(`–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    try {
      await client.invoke(new Api.messages.ReportRequest({
        peer: chatId,
        id: [message.id],
        reason: new Api.InputReportReasonSpam(),
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∂–∞–ª–æ–±–∞ –Ω–∞ —Å–ø–∞–º'
      }));

      console.log(`‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.id} –≤ ${chatId}`);
      
      this.notifyAdmins(`‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.id} –≤ ${chatId}`);

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.id}:`, error);
      
      this.notifyAdmins(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.id} –≤ ${chatId}: ${error.message}`);
    }
  }

  scheduleReconnect(accountId) {
    const maxAttempts = 5;
    const baseDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    
    const attempts = this.reconnectAttempts.get(accountId) || 0;
    
    if (attempts >= maxAttempts) {
      console.error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}`);
      return;
    }

    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1, 2, 4, 8, 16 —Å–µ–∫—É–Ω–¥
    const delay = baseDelay * Math.pow(2, attempts);
    
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attempts + 1}/${maxAttempts} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} —á–µ—Ä–µ–∑ ${delay}ms`);
    
    const timeoutId = setTimeout(async () => {
      try {
        const account = this.db.read().accounts.find(acc => acc.id === accountId);
        if (!account) return;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const session = this.accountManager.loadSession(accountId);
        const client = new TelegramClient(session, 
          this.accountManager.apiId, 
          this.accountManager.apiHash, {
            connectionRetries: 5,
            useWSS: false,
          });

        await client.connect();
        
        if (await client.checkAuthorization()) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
          this.accountManager.clients.set(accountId, client);
          
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
          console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${accountId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω`);
          this.reconnectAttempts.delete(accountId);
          this.reconnectTimeouts.delete(accountId);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–Ω–æ–≤–æ
          if (this.isActive) {
            await this.addEventHandler(accountId);
          }
          
          this.notifyAdmins(`üîÑ –ê–∫–∫–∞—É–Ω—Ç ${accountId} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω`);
        } else {
          throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
        this.reconnectAttempts.set(accountId, attempts + 1);
        this.scheduleReconnect(accountId);
      }
    }, delay);
    
    this.reconnectAttempts.set(accountId, attempts + 1);
    this.reconnectTimeouts.set(accountId, timeoutId);
  }

  isRunning() {
    return this.isActive;
  }

  getStatus() {
    const connectedAccounts = this.accountManager.getConnectedAccounts();
    return {
      isActive: this.isActive,
      connectedAccounts: connectedAccounts.length,
      totalAccounts: this.db.read().accounts.length,
      monitoredGroups: this.db.read().groups.length,
      stopwordsCount: this.db.read().stopwords.length,
      mode: this.db.read().mode
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  addAdmin(userId) {
    this.adminUsers.add(userId.toString());
  }

  removeAdmin(userId) {
    this.adminUsers.delete(userId.toString());
  }

  async notifyAdmins(message) {
    if (!this.bot || this.adminUsers.size === 0) {
      return;
    }

    for (const userId of this.adminUsers) {
      try {
        await this.bot.telegram.sendMessage(userId, message);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${userId}:`, error);
      }
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  startQueueProcessor() {
    if (this.queueProcessor) {
      clearInterval(this.queueProcessor);
    }
    
    this.queueProcessor = setInterval(() => {
      this.processReportQueue();
    }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  queueReport(accountId, message, chatId, stopword) {
    const reportData = {
      accountId,
      message,
      chatId,
      stopword,
      timestamp: Date.now(),
      id: `${accountId}_${message.id}_${Date.now()}`
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    if (this.canSendReport(accountId)) {
      this.reportQueue.push(reportData);
      console.log(`üìã –ñ–∞–ª–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${stopword} –≤ ${chatId} (–ø–æ–∑–∏—Ü–∏—è ${this.reportQueue.length})`);
      this.notifyAdmins(`üìã –ñ–∞–ª–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: "${stopword}" –≤ ${chatId}`);
    } else {
      console.log(`‚ö†Ô∏è –õ–∏–º–∏—Ç –∂–∞–ª–æ–± –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}. –ñ–∞–ª–æ–±–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
      this.notifyAdmins(`‚ö†Ô∏è –õ–∏–º–∏—Ç –∂–∞–ª–æ–± –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}. –ñ–∞–ª–æ–±–∞ –Ω–∞ "${stopword}" –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
    }
  }

  canSendReport(accountId) {
    const now = Date.now();
    const history = this.reportHistory.get(accountId) || [];
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const dayAgo = now - (24 * 60 * 60 * 1000);
    const hourAgo = now - (60 * 60 * 1000);
    
    const recentReports = history.filter(timestamp => timestamp > dayAgo);
    const hourlyReports = recentReports.filter(timestamp => timestamp > hourAgo);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    this.reportHistory.set(accountId, recentReports);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const dailyLimit = recentReports.length < this.maxReportsPerDay;
    const hourlyLimit = hourlyReports.length < this.maxReportsPerHour;
    
    return dailyLimit && hourlyLimit;
  }

  async processReportQueue() {
    if (this.isProcessingQueue || this.reportQueue.length === 0) {
      return;
    }

    this.isProcessingQueue = true;

    try {
      const report = this.reportQueue.shift();
      
      if (!report) {
        this.isProcessingQueue = false;
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –∂–∞–ª–æ–±–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
      const reportAge = Date.now() - report.timestamp;
      const maxAge = 60 * 60 * 1000; // 1 —á–∞—Å
      
      if (reportAge > maxAge) {
        console.log(`‚è∞ –ñ–∞–ª–æ–±–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞: ${report.stopword} –≤ ${report.chatId}`);
        this.isProcessingQueue = false;
        return;
      }

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      if (!this.canSendReport(report.accountId)) {
        console.log(`‚ö†Ô∏è –õ–∏–º–∏—Ç –∂–∞–ª–æ–± –ø—Ä–µ–≤—ã—à–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${report.accountId}`);
        this.isProcessingQueue = false;
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
      await this.sendReportWithDelay(report);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∂–∞–ª–æ–±:', error);
    } finally {
      this.isProcessingQueue = false;
    }
  }

  async sendReportWithDelay(report) {
    // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
    const delay = Math.random() * (this.reportDelayMax - this.reportDelayMin) + this.reportDelayMin;
    
    console.log(`‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(delay / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∂–∞–ª–æ–±—ã...`);
    
    await new Promise(resolve => setTimeout(resolve, delay));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
    await this.reportMessage(report.accountId, report.message, report.chatId);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const history = this.reportHistory.get(report.accountId) || [];
    history.push(Date.now());
    this.reportHistory.set(report.accountId, history);
    
    console.log(`‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π: ${report.stopword} –≤ ${report.chatId}`);
  }

  getQueueStatus() {
    const queueLength = this.reportQueue.length;
    const accountStats = {};
    
    for (const [accountId, history] of this.reportHistory) {
      const now = Date.now();
      const hourAgo = now - (60 * 60 * 1000);
      const dayAgo = now - (24 * 60 * 60 * 1000);
      
      const recentReports = history.filter(timestamp => timestamp > dayAgo);
      const hourlyReports = recentReports.filter(timestamp => timestamp > hourAgo);
      
      accountStats[accountId] = {
        reportsToday: recentReports.length,
        reportsThisHour: hourlyReports.length,
        canSendMore: this.canSendReport(accountId)
      };
    }
    
    return {
      queueLength,
      accountStats,
      isProcessing: this.isProcessingQueue
    };
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  startPeriodicMonitoring() {
    console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ ${this.monitorInterval/1000} —Å–µ–∫—É–Ω–¥)`);
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
      this.checkForNewMessages();
    }, 10000);
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥
    this.periodicMonitor = setInterval(() => {
      this.checkForNewMessages();
    }, this.monitorInterval);
  }

  async checkForNewMessages() {
    if (!this.isActive) return;
    
    console.log(`üîç –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...`);
    
    const data = this.db.read();
    const stopwords = data.stopwords;
    const monitoredGroups = data.groups;
    const mode = data.mode;
    
    if (stopwords.length === 0 || monitoredGroups.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      return;
    }
    
    const accounts = this.accountManager.getConnectedAccounts();
    if (accounts.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
      return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    const client = this.accountManager.getClient(accounts[0].id);
    if (!client) {
      console.log(`‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      return;
    }
    
    let totalNewMessages = 0;
    let totalStopwords = 0;
    
    for (const groupId of monitoredGroups) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        const lastMessageId = this.lastMessageIds.get(groupId) || 0;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª—å—à–µ —á–µ–º lastMessageId)
        const messages = await client.getMessages(groupId, { 
          limit: 20, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
          minId: lastMessageId // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–µ–µ —á–µ–º lastMessageId
        });
        
        if (messages.length > 0) {
          console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${messages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
          totalNewMessages += messages.length;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
          const newestMessageId = Math.max(...messages.map(m => m.id));
          this.lastMessageIds.set(groupId, newestMessageId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
          for (const msg of messages.reverse()) { // reverse –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
            if (msg.text) {
              const messageText = msg.text.toLowerCase();
              
              for (const stopword of stopwords) {
                if (messageText.includes(stopword.toLowerCase())) {
                  console.log(`üö® –ù–ê–ô–î–ï–ù–û –°–¢–û–ü-–°–õ–û–í–û "${stopword}" –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!`);
                  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text.substring(0, 100)}..."`);
                  console.log(`üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...`);
                  
                  totalStopwords++;
                  
                  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                  await this.statsCollector.recordStopwordHit(groupId, stopword, {
                    id: msg.id,
                    date: msg.date,
                    senderId: msg.senderId
                  });
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                  const shortText = msg.text.substring(0, 100) + (msg.text.length > 100 ? '...' : '');
                  this.notifyAdmins(`üö® –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: "${stopword}"\nüìç –ì—Ä—É–ø–ø–∞: ${groupId}\nüí¨ –¢–µ–∫—Å—Ç: ${shortText}`);
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                  if (mode === 'run') {
                    this.queueReport(accounts[0].id, msg, groupId, stopword);
                  } else {
                    console.log(`üìù –¢–ï–°–¢-–†–ï–ñ–ò–ú: –ñ–∞–ª–æ–±–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (${stopword} –≤ ${groupId})`);
                    this.notifyAdmins(`üìù –¢–ï–°–¢-–†–ï–ñ–ò–ú: –ñ–∞–ª–æ–±–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ "${stopword}" –≤ ${groupId}`);
                  }
                  
                  // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                  break;
                }
              }
            }
          }
        } else {
          console.log(`‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã ${groupId}:`, error.message);
      }
    }
    
    if (totalNewMessages > 0) {
      console.log(`üìä –ò—Ç–æ–≥–æ: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalNewMessages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ ${totalStopwords} —Å—Ç–æ–ø-—Å–ª–æ–≤`);
      if (totalStopwords > 0) {
        this.notifyAdmins(`üìä –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${totalNewMessages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, ${totalStopwords} —Å—Ç–æ–ø-—Å–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    } else {
      console.log(`‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
  }
}