import { Telegraf, Markup } from 'telegraf';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { config } from 'dotenv';

import { DatabaseService } from './services/DatabaseService.js';
import { AccountManager } from './services/AccountManager.js';
import { MonitorService } from './services/MonitorService.js';
import { StatsCollector } from './services/StatsCollector.js';
import { BotHandlers } from './bot/handlers.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config({ path: join(dirname(__dirname), 'config.env') });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.env');
  process.exit(1);
}

if (!process.env.API_ID || !process.env.API_HASH) {
  console.error('‚ùå API_ID –∏ API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ config.env');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const db = new DatabaseService();
const accountManager = new AccountManager(db);
const statsCollector = new StatsCollector(db);
const monitorService = new MonitorService(db, accountManager, statsCollector, bot);

// –ü–∞—Ä—Å–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const allowedUsers = process.env.ALLOWED_USERS 
  ? process.env.ALLOWED_USERS.split(',').map(u => u.trim())
  : [];

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
bot.use(async (ctx, next) => {
  const userId = ctx.from.id.toString();
  const username = ctx.from.username ? `@${ctx.from.username}` : null;
  
  const isAllowed = allowedUsers.includes(userId) || 
                   (username && allowedUsers.includes(username)) ||
                   allowedUsers.length === 0; // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
  
  if (!isAllowed) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
    return;
  }
  
  return next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
const handlers = new BotHandlers(db, accountManager, monitorService, statsCollector);
handlers.setupHandlers(bot);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  if (ctx) {
    console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
      updateId: ctx.update?.update_id,
      userId: ctx.from?.id,
      chatId: ctx.chat?.id,
      messageText: ctx.message?.text
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start');
    } catch (replyError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', replyError);
    }
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ webhook –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π polling)
(async () => {
  try {
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ polling –ø—Ä–∏ —Ä–æ–ª–ª–∏–Ω–≥–µ
    const startupDelayMs = parseInt(process.env.STARTUP_DELAY_MS || '0', 10);
    if (startupDelayMs > 0) {
      console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${startupDelayMs} –º—Å...`);
      await new Promise((resolve) => setTimeout(resolve, startupDelayMs));
    }

    const domain = process.env.WEBHOOK_URL;
    const shouldUseWebhook = (!!domain) && ((process.env.USE_WEBHOOK === 'true') || !!process.env.PORT);
    if (shouldUseWebhook) {
      const hookPath = process.env.WEBHOOK_PATH || '/telegram/webhook';
      const port = parseInt(process.env.PORT || '3000', 10);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
      await bot.launch({ webhook: { domain, hookPath, port } });
      console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ WEBHOOK: https://${domain}${hookPath} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    } else {
      if (process.env.USE_WEBHOOK === 'true' && !domain) {
        console.log('‚ö†Ô∏è USE_WEBHOOK=true, –Ω–æ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º POLLING.');
      }
      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–≤–æ—Å—Ç –∞–ø–¥–µ–π—Ç–æ–≤
      try {
        await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      } catch (e) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å):', e.message);
      }

      await bot.launch({ dropPendingUpdates: true });
      console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ POLLING');
    }

    console.log(`üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${allowedUsers.length > 0 ? allowedUsers.join(', ') : '–≤—Å–µ'}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
    process.exit(1);
  }
})();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É GramJS —Å resolve()
  if (reason && reason.message && reason.message.includes('resolve()') && reason.message.includes('non-request instance')) {
    // –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - –æ–Ω–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    return;
  }
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.error('Promise:', promise);
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGINT');
  monitorService.stop().then(() => {
    console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
  monitorService.stop().then(() => {
    console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});